/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_CUSTOMBUFFERIZEPASS
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// CustomBufferizePass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_CUSTOMBUFFERIZEPASS
struct CustomBufferizePassOptions {
  bool allowUnknownOps = false;
  bool testAnalysisOnly = false;
  bool printConflicts = false;
  unsigned bufferAlignment = 0;
};
#undef GEN_PASS_DECL_CUSTOMBUFFERIZEPASS
#endif // GEN_PASS_DECL_CUSTOMBUFFERIZEPASS
#ifdef GEN_PASS_DEF_CUSTOMBUFFERIZEPASS
namespace impl {

template <typename DerivedT>
class CustomBufferizePassBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = CustomBufferizePassBase;

  CustomBufferizePassBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  CustomBufferizePassBase(const CustomBufferizePassBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  CustomBufferizePassBase& operator=(const CustomBufferizePassBase &) = delete;
  CustomBufferizePassBase(CustomBufferizePassBase &&) = delete;
  CustomBufferizePassBase& operator=(CustomBufferizePassBase &&) = delete;
  ~CustomBufferizePassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("custom-bufferize");
  }
  ::llvm::StringRef getArgument() const override { return "custom-bufferize"; }

  ::llvm::StringRef getDescription() const override { return "Custom pass for buffer transformation"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("CustomBufferizePass");
  }
  ::llvm::StringRef getName() const override { return "CustomBufferizePass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(CustomBufferizePassBase<DerivedT>)

  CustomBufferizePassBase(CustomBufferizePassOptions options) : CustomBufferizePassBase() {
    allowUnknownOps = std::move(options.allowUnknownOps);
    testAnalysisOnly = std::move(options.testAnalysisOnly);
    printConflicts = std::move(options.printConflicts);
    bufferAlignment = std::move(options.bufferAlignment);
  }
protected:
  ::mlir::Pass::Option<bool> allowUnknownOps{*this, "allow-unknown-ops", ::llvm::cl::desc("Allow ops that don't implement BufferizableOpInterface"), ::llvm::cl::init(false)};
  ::mlir::Pass::Option<bool> testAnalysisOnly{*this, "test-analysis-only", ::llvm::cl::desc("Only run the analysis and test if the IR can be bufferized"), ::llvm::cl::init(false)};
  ::mlir::Pass::Option<bool> printConflicts{*this, "print-conflicts", ::llvm::cl::desc("Print detected conflicts during analysis"), ::llvm::cl::init(false)};
  ::mlir::Pass::Option<unsigned> bufferAlignment{*this, "buffer-alignment", ::llvm::cl::desc("Set alignment for allocated buffers"), ::llvm::cl::init(0)};
  ::mlir::Pass::Statistic numBufferAlloc{this, "num-buffer-alloc", "Number of memref.alloc operations created"};
  ::mlir::Pass::Statistic numTensorInPlace{this, "num-tensor-in-place", "Number of tensor ops bufferized in-place"};
  ::mlir::Pass::Statistic numTensorOutOfPlace{this, "num-tensor-out-of-place", "Number of tensor ops bufferized out-of-place"};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_CUSTOMBUFFERIZEPASS
#endif // GEN_PASS_DEF_CUSTOMBUFFERIZEPASS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// CustomBufferizePass Registration
//===----------------------------------------------------------------------===//

inline void registerCustomBufferizePass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::bufferization::createCustomBufferizePass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerCustomBufferizePassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::bufferization::createCustomBufferizePass();
  });
}

//===----------------------------------------------------------------------===//
//  Registration
//===----------------------------------------------------------------------===//

inline void registerPasses() {
  registerCustomBufferizePass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class CustomBufferizePassBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = CustomBufferizePassBase;

  CustomBufferizePassBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  CustomBufferizePassBase(const CustomBufferizePassBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}
  CustomBufferizePassBase& operator=(const CustomBufferizePassBase &) = delete;
  CustomBufferizePassBase(CustomBufferizePassBase &&) = delete;
  CustomBufferizePassBase& operator=(CustomBufferizePassBase &&) = delete;
  ~CustomBufferizePassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("custom-bufferize");
  }
  ::llvm::StringRef getArgument() const override { return "custom-bufferize"; }

  ::llvm::StringRef getDescription() const override { return "Custom pass for buffer transformation"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("CustomBufferizePass");
  }
  ::llvm::StringRef getName() const override { return "CustomBufferizePass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(CustomBufferizePassBase<DerivedT>)

protected:
  ::mlir::Pass::Option<bool> allowUnknownOps{*this, "allow-unknown-ops", ::llvm::cl::desc("Allow ops that don't implement BufferizableOpInterface"), ::llvm::cl::init(false)};
  ::mlir::Pass::Option<bool> testAnalysisOnly{*this, "test-analysis-only", ::llvm::cl::desc("Only run the analysis and test if the IR can be bufferized"), ::llvm::cl::init(false)};
  ::mlir::Pass::Option<bool> printConflicts{*this, "print-conflicts", ::llvm::cl::desc("Print detected conflicts during analysis"), ::llvm::cl::init(false)};
  ::mlir::Pass::Option<unsigned> bufferAlignment{*this, "buffer-alignment", ::llvm::cl::desc("Set alignment for allocated buffers"), ::llvm::cl::init(0)};
  ::mlir::Pass::Statistic numBufferAlloc{this, "num-buffer-alloc", "Number of memref.alloc operations created"};
  ::mlir::Pass::Statistic numTensorInPlace{this, "num-tensor-in-place", "Number of tensor ops bufferized in-place"};
  ::mlir::Pass::Statistic numTensorOutOfPlace{this, "num-tensor-out-of-place", "Number of tensor ops bufferized out-of-place"};
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
